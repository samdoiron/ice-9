#define PUSH(the_val) \
  {%- assign stack_top = stack_top | plus: 1 -%} \
  {%- assign stack = stack | append: " " | append: the_val -%}

#define POP(the_name) \
  {%- assign stack_array = stack | split: " " -%} \
  {%- assign the_name = stack_array | last %} \
  {%- assign stack = stack | truncatewords: stack_top | remove: "..." -%} \
  {%- assign stack_top = stack_top | minus: 1 -%}

#define CAST_INT(value) {%- assign value = value | plus: 0 -%}

#define _(x)

<code>
{%- assign constants = "0 1 100" | split: " "  -%}
{%- assign bytecode = "c/0 c/1 a d e d c/2 q j/11 c/1 j/1 r" -%}
{%- assign ops = bytecode | split: " " -%}

_(
  The stack separate elements based on space, since this makes it possible to POP
  using truncatewords.

  However, truncatewords when called with 0 returns a single word, so we need to
  store at least 1 element at all times, and ignore it. This is the "__BASE__"
  element. Unfortunately, this means all indexes are 1 based for the stack :<
)

{%- assign stack = "__BASE__" -%}
{%- assign stack_top = 0 -%}
{%- assign pc = 0 -%}
{%- assign cycle_count = 0 -%}
  
constants: {{ constants | join: ", " }}<br />

bytecode: {{ bytecode }}
<br />--- Output ----------------------------------------------------------<br />
{%- for _tick in (1..1000000) -%}
    {%- assign cycle_count = cycle_count | plus: 1 -%}

  	{%- assign op_str = ops[pc] -%}
    {%- assign op = op_str | split: "/" -%}
    {%- assign op_type = op[0] -%}
  
    {%- assign next_pc = pc | plus: 1 %}
  
    {%- case op_type -%}

    _( push constant )
  	{%- when "c" -%}
      {%- assign constant_index = op[1] | plus: 0 -%}
      {%- assign constant_value = constants[constant_index] -%}
      PUSH(constant_value)

    _( add )
    {%- when "a" -%}
      POP(first)
      POP(second)
      {%- assign result = first | plus: second %}
      PUSH(result)

    _( echo )
    {%- when "e" -%}
      POP(popped)
      {{ popped }}

    _( equality check )
    {%- when "q" -%}
      POP(first)
      POP(second)
  
      {%- assign result = 0 -%}
      {%- if first == second -%}
        {%- assign result = 1 %}
      {%- endif -%}

      PUSH(result)

    _( jump if true )
  	{%- when "j" -%}
      {%- assign target = op[1] -%}
      CAST_INT(target)

      POP(condition)
      CAST_INT(condition)

      {%- if condition == 1 -%}
        {%- assign next_pc = target -%}
      {%- endif -%}

    _( duplicate top of stack )
    {%- when "d" -%}
      POP(popped)
      PUSH(popped)
      PUSH(popped)
    _( return )
  	{%- when "r" -%}
      {%- break -%}
    {%- endcase -%}
  
  	{%- assign pc = next_pc -%}
{%- endfor -%}
<br />---------------------------------------------------------------------<br />
</code>
<code><pre>
Finished in {{ cycle_count }} cycles
End stack: {{ stack }}
Stack top: {{ stack_top }}
PC: {{ pc }}
</pre></code>
    <code>
